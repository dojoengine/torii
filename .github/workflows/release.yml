name: release

on:
  workflow_dispatch:
    inputs:
      preview:
        description: 'Preview tag if not empty. Needs to be in format vX.Y.Z-preview.X'
        type: string
  pull_request:
    types: [closed]
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  prepare:
    # The prepare-release branch names comes from the release-dispatch.yml workflow.
    if: (github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'prepare-release') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.release_info.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
      - name: Get version
        id: release_info
        run: |
          if [[ "${{ github.event.inputs.preview || 'false' }}" != "false" ]]; then
            # check if valid
            if [[ ! "${{ github.event.inputs.preview }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-preview\.[0-9]+$ ]]; then
              echo "Invalid preview tag format. Needs to be in format vX.Y.Z-preview.X"
              exit 1
            fi
            echo "tag_name=${{ github.event.inputs.preview }}" >> $GITHUB_OUTPUT
          else
            cargo install cargo-get
            echo "tag_name=v$(cargo get workspace.package.version)" >> $GITHUB_OUTPUT
          fi

  release:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    needs: prepare
    runs-on: ${{ matrix.job.os }}
    env:
      PLATFORM_NAME: ${{ matrix.job.platform }}
      TARGET: ${{ matrix.job.target }}
      ARCH: ${{ matrix.job.arch }}
    strategy:
      matrix:
        job:
          # The OS is used for the runner
          # The platform is a generic platform name
          # The target is used by Cargo
          # The arch is either 386, arm64 or amd64
          # The svm target platform to use for the binary https://github.com/roynalnaruto/svm-rs/blob/84cbe0ac705becabdc13168bae28a45ad2299749/svm-builds/build.rs#L4-L24
          - os: ubuntu-latest-8-cores
            platform: linux
            target: x86_64-unknown-linux-gnu
            arch: amd64
          - os: ubuntu-latest-8-cores-arm64
            platform: linux
            target: aarch64-unknown-linux-gnu
            arch: arm64
            svm_target_platform: linux-aarch64
          - os: macos-13
            platform: darwin
            target: x86_64-apple-darwin
            arch: amd64
          - os: macos-latest-xlarge
            platform: darwin
            target: aarch64-apple-darwin
            arch: arm64
          - os: windows-latest
            platform: win32
            target: x86_64-pc-windows-msvc
            arch: amd64

    steps:
      - uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        name: Rust Toolchain Setup
        with:
          toolchain: "1.85.0"
          target: ${{ matrix.job.target }}
          cache-on-failure: true
          cache-key: ${{ matrix.job.target }}

      - uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "25.x"

      - name: Apple M1 setup
        if: ${{ matrix.job.target == 'aarch64-apple-darwin' }}
        run: |
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV

      - name: Linux ARM setup
        if: ${{ matrix.job.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-aarch64-linux-gnu libssl-dev
          # We build jemalloc with 64KB pagesize so that it works for all linux/arm64 pagesize variants
          # See: https://github.com/jemalloc/jemalloc/issues/467
          echo "JEMALLOC_SYS_WITH_LG_PAGE=16" >> $GITHUB_ENV

      - name: Build binary
        run: |
          cargo --version
          cargo build -p torii --release --target ${{ matrix.job.target }}

      - name: Archive binaries
        id: artifacts
        env:
          VERSION_NAME: ${{ needs.prepare.outputs.tag_name }}
        run: |
          if [ "$PLATFORM_NAME" == "linux" ]; then
            tar -czvf "torii_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C ./target/${TARGET}/release torii
            echo "file_name=torii_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" >> $GITHUB_OUTPUT
          elif [ "$PLATFORM_NAME" == "darwin" ]; then
            # We need to use gtar here otherwise the archive is corrupt.
            # See: https://github.com/actions/virtual-environments/issues/2619
            gtar -czvf "torii_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C ./target/${TARGET}/release torii
            echo "file_name=torii_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" >> $GITHUB_OUTPUT
          else
            cd ./target/${TARGET}/release
            7z a -tzip "torii_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" torii.exe
            mv "torii_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" ../../../
            echo "file_name=torii_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # We move binaries so they match $TARGETPLATFORM in the Docker build
      - name: Move Binaries
        if: ${{ env.PLATFORM_NAME == 'linux' }}
        run: |
          mkdir -p $PLATFORM_NAME/$ARCH
          mv target/${TARGET}/release/torii $PLATFORM_NAME/$ARCH
        shell: bash

      - name: Upload docker binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.job.target }}
          path: ${{ env.PLATFORM_NAME }}
          retention-days: 1

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.job.target }}
          path: ${{ steps.artifacts.outputs.file_name }}
          retention-days: 1

  create-draft-release:
    runs-on: ubuntu-latest-4-cores
    needs: [prepare, release]
    env:
      GITHUB_USER: ${{ github.repository_owner }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    if: ${{ !contains(needs.prepare.outputs.tag_name, 'preview') }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          path: artifacts
          merge-multiple: true
      - id: version_info
        run: |
          cargo install cargo-get
          echo "version=v$(cargo get workspace.package.version)" >> $GITHUB_OUTPUT
      - name: Display structure of downloaded files
        run: ls -R artifacts
      - run: gh release create ${{ steps.version_info.outputs.version }} ./artifacts/*.{gz,zip} --generate-notes --draft

  docker-build-and-push:
    runs-on: ubuntu-latest-4-cores
    needs: [prepare, release]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          path: artifacts/linux
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push docker image
        if: ${{ contains(needs.prepare.outputs.tag_name, 'preview') }}
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ needs.prepare.outputs.tag_name }}
          platforms: linux/amd64,linux/arm64
          build-contexts: |
            artifacts=artifacts

      - name: Build and push docker image
        if: ${{ !contains(needs.prepare.outputs.tag_name, 'preview') }}
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ghcr.io/${{ github.repository }}:latest,ghcr.io/${{ github.repository }}:${{ needs.prepare.outputs.tag_name }}
          platforms: linux/amd64,linux/arm64
          build-contexts: |
            artifacts=artifacts
